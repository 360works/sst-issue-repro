import {
    text,
    pgTable,
    uuid,
    date,
    boolean,
    timestamp,
    customType
} from "drizzle-orm/pg-core";
import {userSchema} from "./user.sql";

const bytea = customType<{ data: Buffer; notNull: false; default: false }>({
    dataType() {
        return "bytea";
    },
});

export const applicationSchema = pgTable("application", {
    id: uuid("id").defaultRandom().notNull().primaryKey(),
    userID: uuid("userID").references(() => userSchema.id),
    jobNum: text("JobNum"),
    status: text("Status").notNull(),
    submittedDate: date("SubmittedDate"),
    jobType: text("JobType").notNull(),
    // Contact Information
    sharedCompanyName: text("SharedCompanyName"),
    sharedAttn: text("SharedAttn"),
    sharedAddress: text("SharedAddress"),
    sharedCity: text("SharedCity"),
    sharedState: text("SharedState"),
    sharedZip: text("SharedZip"),
    sharedPhone: text("SharedPhone"),
    sharedCell: text("SharedCell"),
    sharedEmail: text("SharedEmail"),
    utilApEngineeringContact: text("UtilApEngineeringContact"),
    utilApEngineeringEmail: text("UtilApEngineeringEmail"),
    utilApEngineeringPhone: text("UtilApEngineeringPhone"),
    utilApEngineeringCell: text("UtilApEngineeringCell"),
    utilApStartDate: timestamp("UtilApStartDate", {withTimezone: true, mode: "date"}),
    utilApEndDate: timestamp("UtilApEndDate", {withTimezone: true, mode: "date"}),
    incidentPhone: text("IncidentPhone"),
    // Type Of Encroachment
    sharedScopeProjectName: text("SharedScopeProjectName"),
    utilType1: text("UtilType1"),
    utilType2: text("UtilType2"),
    utilType3: text("UtilType3"),
    utilPipeBridge: boolean("UtilPipeBridge"),
    utilTypeNumOfCarriers: text("UtilTypeNumOfCarriers"),
    // Location
    sharedLocCity: text("SharedLocCity"),
    sharedLocCounty: text("SharedLocCounty"),
    sharedLocState: text("SharedLocState"),
    sharedLocSection: text("SharedLocSection"),
    sharedLocTownship: text("SharedLocTownship"),
    sharedLocRange: text("SharedLocRange"),
    utilLocStreetName: text("UtilLocStreetName"),
    sharedLocBridgeCenterlineNearestCrossing: text("SharedLocBridgeCenterlineNearestCrossing"),
    sharedLocDodtNo: text("SharedLocDodtNo"),
    sharedLocRRSubdivision: text("SharedLocRRSubdivision"),
    sharedLocLatitude: text("SharedLocLatitude"),
    sharedLocLongitude: text("SharedLocLongitude"),
    utilLocAocDegrees: text("UtilLocAocDegrees"),
    sharedLocCrossMilePost: text("SharedLocCrossMilePost"),
    sharedLocParallelBegMilePost: text("SharedLocParallelBegMilePost"),
    sharedLocSpurDist: text("SharedLocSpurDist"),
    utilLocDistBridge: text("UtilLocDistBridge"),
    utilLocBridgeMP: text("UtilLocBridgeMP"),
    // Line Specification
    utilWireLineRadioOption: text("UtilWireLineRadioOption"),
    utilWireLinePowerLineVoltage: text("UtilWireLinePowerLineVoltage"),
    utilWireLineOtherDetails: text("UtilWireLineOtherDetails"),
    utilWireLineInnerductCt: text("UtilWireLineInnerductCt"),
    utilWireLineFibersCt: text("UtilWireLineFibersCt"),
    utilPipeLineVerticalClearance: text("UtilPipeLineVerticalClearance"),
    utilWireLinePolesOnRRProp: text("UtilWireLinePolesOnRRProp"),
    utilWireLinePolesHorzDistFromNearestTrack: text("UtilWireLinePolesHorzDistFromNearestTrack"),
    utilWireLinePolesDistance: text("UtilWireLinePolesDistance"),
    utilWireLineCarrierDepthBelowBaseRail: text("UtilWireLineCarrierDepthBelowBaseRail"),
    utilWireLineCarrierDepthBelowBottom: text("UtilWireLineCarrierDepthBelowBottom"),
    varianceWirelineCarrier: boolean("VarianceWirelineCarrier"),
    utilWireLineCarrierWireLength: text("UtilWireLineCarrierWireLength"),
    utilWireLineCarrierUndergroundParallel: text("UtilWireLineCarrierUndergroundParallel"),
    // These fields have odd values.  Keeping them as text
    utilWireLineCarrierPipeInsideDia: text("UtilWireLineCarrierPipeInsideDia"),
    utilWireLineCarrierPipeWallThickness: text("UtilWireLineCarrierPipeWallThickness"),
    utilWireLineCarrierPipeMaterial: text("UtilWireLineCarrierPipeMaterial"),
    utilWireLineCarrierMinYieldPt: text("UtilWireLineCarrierMinYieldPt"),
    utilWireLineCarrierJointType: text("UtilWireLineCarrierJointType"),
    // // Pipeline section
    utilPipelineCommodity: text("UtilPipelineCommodity"),
    pipelineTransmission: text("PipelineTransmission"),
    utilPipelineTranOtherDesc: text("UtilPipelineTranOtherDesc"),
    pipelineCommodityState: text("PipelineCommodityState"),
    pipelineCommodityFlammable: text("PipelineCommodityFlammable"),
    pipelineCommodityProperties: text("PipelineCommodityProperties").array(),
    utilPipelineTypeOtherDetails: text("UtilPipelineTypeOtherDetails"),
    utilPipelineTypeDetails: text("UtilPipelineTypeDetails"),
    utilPipelineCarrierDepthBelowBase: text("UtilPipelineCarrierDepthBelowBase"),
    utilPipelineCarrierDepthBelowBottom: text("UtilPipelineCarrierDepthBelowBottom"),
    variancePipelineCarrier: boolean("VariancePipelineCarrier"),
    utilPipelineCarrierLength: text("UtilPipelineCarrierLength"),
    utilPipelineCarrierUndergroundParallel: text("UtilPipelineCarrierUndergroundParallel"),
    utilPipelineCarrierInsideDia: text("UtilPipelineCarrierInsideDia"),
    utilPipelineCarrierWallThick: text("UtilPipelineCarrierWallThick"),
    utilPipelineCarrierMaterial: text("UtilPipelineCarrierMaterial"),
    utilPipelineCarrierMinYieldPt: text("UtilPipelineCarrierMinYieldPt"),
    utilPipelineCarrierJointType: text("UtilPipelineCarrierJointType"),
    utilPipelineCarrierMaxOperPressure: text("UtilPipelineCarrierMaxOperPressure"),
    utilPipelineHydrostaticPressure: text("UtilPipelineHydrostaticPressure"),
    utilPipelineProtectiveCoating: boolean("UtilPipelineProtectiveCoating"),
    utilPipelineCarrierProtectiveCoatingType: text("UtilPipelineCarrierProtectiveCoatingType"),
    utilPipelineCarrierCathodicallyProtected: boolean("UtilPipelineCarrierCathodicallyProtected"),

    // // Casing section
    casingPipeline: text("CasingPipeline"),
    utilPipelineCasingDepthBelowBase: text("UtilPipelineCasingDepthBelowBase"),
    utilPipelineCasingDepthBelowBottom: text("UtilPipelineCasingDepthBelowBottom"),
    variancePipelineCasing: text("VariancePipelineCasing"),
    utilPipelineCasingLength: text("UtilPipelineCasingLength"),
    utilPipelineCasingUndergroundParallel: text("UtilPipelineCasingUndergroundParallel"),
    utilPipelineCasingInsideDia: text("UtilPipelineCasingInsideDia"),
    utilPipelineCasingWallThick: text("UtilPipelineCasingWallThick"),
    utilPipelineCasingMaterial: text("UtilPipelineCasingMaterial"),
    utilPipelineCasingMinYieldPt: text("UtilPipelineCasingMinYieldPt"),
    utilPipelineCasingJointType: text("UtilPipelineCasingJointType"),
    utilPipelineCasingMaxOperPressure: text("UtilPipelineCasingMaxOperPressure"),
    utilPipelineCasingProtectiveCoat: boolean("UtilPipelineCasingProtectiveCoat"),
    utilPipelineCasingProtectiveCoatType: text("UtilPipelineCasingProtectiveCoatType"),
    utilPipelineCasingCathodicallyProtected: boolean("UtilPipelineCasingCathodicallyProtected"),
    utilPipelineVented: boolean("UtilPipelineVented"),
    utilPiplineVentedDiameter: text("UtilPiplineVentedDiameter"),
    utilPipelineVentedCount: text("UtilPipelineVentedCount"),
    utilPipelineVentedHeightAboveGround: text("UtilPipelineVentedHeightAboveGround"),

    // Method of Installation
    utilMoiPick: text("UtilMoiPick"),
    utilMoiOtherDesc: text("UtilMoiOtherDesc"),

    // Existing Agreement
    utilExistingAgreement: text("UtilExistingAgreement"),
    sharedDocPastAgreement: text("SharedDocPastAgreement"),
    utilExistingAgreeNum: text("UtilExistingAgreeNum"),
    utilExistingDate: timestamp("UtilExistingDate", {withTimezone: true, mode: "date"}),
    existingAgreementType: text("ExistingAgreementType").array(),
    utilExistingOtherDesc: text("UtilExistingOtherDesc"),

    // Service Been Requested by KCS?
    utilKcsReq: text("UtilKcsReq"),
    utilKcsReqServiceToBuilding: boolean("UtilKcsReqServiceToBuilding"),
    utilKcsReqServiceToSwitch: boolean("UtilKcsReqServiceToSwitch"),
    utilKcsReqServiceToSignal: boolean("UtilKcsReqServiceToSignal"),
    utilKcsReqServiceOther: boolean("UtilKcsReqServiceOther"),
    utilKcsReqServiceOtherDesc: text("UtilKcsReqServiceOtherDesc"),
    utilKcsReqContact: text("UtilKcsReqContact"),
    utilKcsReqContactPhone: text("UtilKcsReqContactPhone"),
    utilKcsReqContactEmail: text("UtilKcsReqContactEmail"),
    utilKcsReqProjectName: text("UtilKcsReqProjectName"),
    utilKcsReqAfeNumber: text("UtilKcsReqAfeNumber"),

    // Fees and Acceptance
    sharedSignaturePrinted: text("SharedSignaturePrinted"),
    sharedSignatureTitle: text("SharedSignatureTitle"),
    sharedSignatureDate: timestamp("SharedSignatureDate", {withTimezone: true, mode: "date"}),

    // Drawings
    sharedDocDrawing1: text("SharedDocDrawing1"),
    sharedDocDrawing2: text("SharedDocDrawing2"),
    sharedDocDrawing3: text("SharedDocDrawing3"),
    sharedDocDrawing4: text("SharedDocDrawing4"),
    sharedDocDrawing5: text("SharedDocDrawing5"),

    // ROE Scope of Work
    roeScopeDimensionA: text("RoeScopeDimensionA"),
    roeScopeDimensionB: text("RoeScopeDimensionB"),
    roeScopePeriodFrom: timestamp("RoeScopePeriodFrom", {withTimezone: true, mode: "date"}),
    roeScopePeriodTo: timestamp("RoeScopePeriodTo", {withTimezone: true, mode: "date"}),
    roeScopeTypeBridge: boolean("RoeScopeTypeBridge"),
    roeScopeTypeRoadResurface: boolean("RoeScopeTypeRoadResurface"),
    roeScopeTypeSurvey: boolean("RoeScopeTypeSurvey"),
    roeScopeTypeDrainage: boolean("RoeScopeTypeDrainage"),
    roeScopeTypeUtility: boolean("RoeScopeTypeUtility"),
    roeScopeTypeInspection: boolean("RoeScopeTypeInspection"),
    roeScopeTypeOther: boolean("RoeScopeTypeOther"),
    roeScopeTypeOtherDesc: text("RoeScopeTypeOtherDesc"),
    roeScopePurpose: text("RoeScopePurpose"),

    // Location ROE section
    sharedLocCrossMilePostPlusFt: text("SharedLocCrossMilePostPlusFt"),
    sharedLocParallelBegMilePostPlusFt: text("SharedLocParallelBegMilePostPlusFt"),
    sharedLocParallelEndMilePost: text("SharedLocParallelEndMilePost"),
    sharedLocParallelEndMilePostPlusFt: text("SharedLocParallelEndMilePostPlusFt"),
    roeLocWithin25Ft: text("RoeLocWithin25Ft"),
    roeLocCrossingReq: text("RoeLocCrossingReq"),
    roeLocCrossingReqMilePost: text("RoeLocCrossingReqMilePost"),
    roeLocCrossingReqMilePostPlusFt: text("RoeLocCrossingReqMilePostPlusFt"),
});

export type SelectApplication = typeof applicationSchema.$inferSelect;
export type InsertApplication = typeof applicationSchema.$inferInsert;
